@model AllRadiosQueryModel
@{
    ViewBag.Title = $"All Radios";
}

<div class="d-flex justify-content-between align-items-center gap-5">
    <h1 class="">@ViewBag.Title</h1>
    <form method="get">
        <div class="row bg-secondary rounded-3">
            <div class="form-group col-md-3 d-flex justify-content-between">
                <div class="form-group">
                    <label asp-for="Group"></label>
                    <select asp-for="Group" class="form-control">
                        <option value="">All</option>
                        @foreach (var group in Model.Groups)
                        {
                            <option value="@group">@group</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group col-md-3 w-25">
                <label asp-for="SearchTerm"></label>
                <input asp-for="SearchTerm" class="form-control" placeholder="search...">
            </div>

            <div class="form-group col-md-3">
                <div class="form-group">
                    <label asp-for="Sorting"></label>
                    <select asp-for="Sorting" class="form-control">
                        <option value="0">Default</option>
                        <option value="1">A - Z</option>
                        <option value="2">Z - A</option>
                        <option value="3">Favorites</option>
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group p-4">
                    <input type="submit" value="Search" class="btn btn-dark" />
                </div>
            </div>
        </div>
    </form>
</div>
<br />
<br />

@if (!Model.Radios.Any())
{
    <h2 class="text-center text-light">No radios found!</h2>
}
<partial name="_RadioPartialSortByDefault"></partial>
<br />

@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalRadiosCount /
        Model.RadiosPerPage);
}
@{
    var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
    !Model.Radios.Any();
}

<nav class="" aria-label="...">
    <ul class="pagination justify-content-center">
        <li class="page-item disabled">
            <a class="btn btn-secondary text-black link-page
               @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
               asp-controller="Radio"
               asp-action="Collection"
               asp-route-currentPage="@previousPage"
               asp-route-group="@Model.Group"
               asp-route-searchTerm="@Model.SearchTerm"
               asp-route-sorting="@((int)Model.Sorting)">PREVIOUS</a>
        </li>
        @for (int i = 1; i < maxPage + 1; i++)
        {
            <li class="page-item @(Model.CurrentPage == i ? "active" : string.Empty)" aria-current="page">
                <a class="text-dark link-page"
                   asp-controller="Radio"
                   asp-action="Collection"
                   asp-route-currentPage="@(i)"
                   asp-route-group="@Model.Group"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-sorting="@((int)Model.Sorting)">
                    <span class="page-link">@i</span>
               </a>
            </li>
        }
        <a class="btn btn-secondary text-black link-page
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
               asp-controller="Radio"
               asp-action="Collection"
               asp-route-currentPage="@(Model.CurrentPage + 1)"
               asp-route-group="@Model.Group"
               asp-route-searchTerm="@Model.SearchTerm"
               asp-route-sorting="@((int)Model.Sorting)">></a>
        </li>
    </ul>
</nav>


